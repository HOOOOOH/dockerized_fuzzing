a=0
b="asdfasdfasdf adaf asdf asdfa sdf asdfasdfasdfa sdf"
c={1=>1, 2=>"foo", "foo"=>nil, nil=> nil}
d=[1,nil," sdfg"]
srand(1337)
def b.new_msym(c,b,d,c,d,d,c,d,b,a,d,a,c,b,d,d,a,d,c,a,d,a,b,c,c,a,c,c,d,c,a,b,d,b,d,a,a,a,c,b,d,a,c,d,c,d,a,a,c,d,b,d,d,d,b,c,a,a,b,a,d,c,b,b,d,a,a,c,c,a,a,a,c,c,b,d,a,a,d,b,a,d,b,d,c,c,b,a,d,c,c,d,d,a,a,b,d,c,d,c,a,d,b,d,c,b,c,c,c,d,c,a,c)
def c.keyword_nil(d,c,a,c,c,a,a,b,b,a,a,d,d,c,a,a,d,a,a,c,b,b,)
def b.precision(b)
 end
def c.feedvalue()
 end
c = (((((true.."foobadsfdsfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd").."foo")..(((false..(0..([]..nil)))..(/foo/..(("foo"..[])..0)))..((("foo"..([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil]..(/foo/..0.0)))..([]..[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil]))..(/foo/..1))))..(((0.0..false)..true)..((((0.0..[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil])..("foo"..([]..false)))..((((("foo"..0.0)..(0..}))..((("foobadsfdsfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd"..[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil])..nil)..true))..((("foobadsfdsfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd"..nil)..0.0)..(("foo"..nil)..})))..(("foobadsfdsfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd"..nil)..(([]..})..((([]../foo/)..([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil].."foo"))..[])))))..nil)))..(((true..[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil])../foo/)..((1..[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil])..((((1..(}.."foobadsfdsfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd"))..true).."foobadsfdsfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd")..0.0))))
def c.interval_ratio(a,d,)
 end
def d.filename(a,d,d,b,b,)
yield a
return d
 end
 end
def b.__classname__(a,d,d,b,d,a,b,b,b,c,a,c,a,d,a,a,)
c = 0.0
def c.cosh(a,a,)
 end
def b.f_optarg()
a = a.defined(){||  }
continue c
def b.acosh(d)
 end
 end
def c.req()
 end
d = keyword_yield.__gmon_start__(){||  }
b = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,nil]
 end
a = _IO_putc.idx(d,c,d,b,d,d,b,d,){|c,d,|  }
a = b.memmove(d,c,b,c,c,a){|c,| return c
 }
a = c.numeric(b,a,c,c,d,a,){|| d = 1
def d.idx2()
 end
 }
def a.obj(b)
 end
def c.end()
 end
return b
 end
def a.MRUBY_COPYRIGHT(d,c,d,c,c,b,d,c,b,a,c,d,d,b,a,b,b,a,)
d = b.h7(){|| continue d
 }
 end
b = (/foo/..0.0)
def a.T_RANGE()
 end
b = alias.sinh(b,b,d,){|b,a,b| yield c
b = (false.."foobadsfdsfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd")
 }
d = private._IO_putc(d){|| c = /foo/
 }
raise a
